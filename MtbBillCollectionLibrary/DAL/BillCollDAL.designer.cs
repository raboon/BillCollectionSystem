#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MtbBillCollectionLibrary.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MTBBillCollection")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBankList(BankList instance);
    partial void UpdateBankList(BankList instance);
    partial void DeleteBankList(BankList instance);
    partial void InsertBranchList(BranchList instance);
    partial void UpdateBranchList(BranchList instance);
    partial void DeleteBranchList(BranchList instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCollection(Collection instance);
    partial void UpdateCollection(Collection instance);
    partial void DeleteCollection(Collection instance);
    partial void InsertCollectionAudit(CollectionAudit instance);
    partial void UpdateCollectionAudit(CollectionAudit instance);
    partial void DeleteCollectionAudit(CollectionAudit instance);
    partial void InsertCollectionStatus(CollectionStatus instance);
    partial void UpdateCollectionStatus(CollectionStatus instance);
    partial void DeleteCollectionStatus(CollectionStatus instance);
    partial void InsertCollectionTransfer(CollectionTransfer instance);
    partial void UpdateCollectionTransfer(CollectionTransfer instance);
    partial void DeleteCollectionTransfer(CollectionTransfer instance);
    partial void InsertCollectionType(CollectionType instance);
    partial void UpdateCollectionType(CollectionType instance);
    partial void DeleteCollectionType(CollectionType instance);
    partial void InsertFileUploadLog(FileUploadLog instance);
    partial void UpdateFileUploadLog(FileUploadLog instance);
    partial void DeleteFileUploadLog(FileUploadLog instance);
    partial void InsertInstrumentType(InstrumentType instance);
    partial void UpdateInstrumentType(InstrumentType instance);
    partial void DeleteInstrumentType(InstrumentType instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertScreenList(ScreenList instance);
    partial void UpdateScreenList(ScreenList instance);
    partial void DeleteScreenList(ScreenList instance);
    partial void InsertSpecialEdit(SpecialEdit instance);
    partial void UpdateSpecialEdit(SpecialEdit instance);
    partial void DeleteSpecialEdit(SpecialEdit instance);
    partial void InsertTraceLog(TraceLog instance);
    partial void UpdateTraceLog(TraceLog instance);
    partial void DeleteTraceLog(TraceLog instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::MtbBillCollectionLibrary.Properties.Settings.Default.MTBBillCollectionConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BankList> BankLists
		{
			get
			{
				return this.GetTable<BankList>();
			}
		}
		
		public System.Data.Linq.Table<BranchList> BranchLists
		{
			get
			{
				return this.GetTable<BranchList>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Collection> Collections
		{
			get
			{
				return this.GetTable<Collection>();
			}
		}
		
		public System.Data.Linq.Table<CollectionAudit> CollectionAudits
		{
			get
			{
				return this.GetTable<CollectionAudit>();
			}
		}
		
		public System.Data.Linq.Table<CollectionMapping> CollectionMappings
		{
			get
			{
				return this.GetTable<CollectionMapping>();
			}
		}
		
		public System.Data.Linq.Table<CollectionStatus> CollectionStatus
		{
			get
			{
				return this.GetTable<CollectionStatus>();
			}
		}
		
		public System.Data.Linq.Table<CollectionTransfer> CollectionTransfers
		{
			get
			{
				return this.GetTable<CollectionTransfer>();
			}
		}
		
		public System.Data.Linq.Table<CollectionType> CollectionTypes
		{
			get
			{
				return this.GetTable<CollectionType>();
			}
		}
		
		public System.Data.Linq.Table<FileUploadLog> FileUploadLogs
		{
			get
			{
				return this.GetTable<FileUploadLog>();
			}
		}
		
		public System.Data.Linq.Table<InstrumentType> InstrumentTypes
		{
			get
			{
				return this.GetTable<InstrumentType>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ScreenList> ScreenLists
		{
			get
			{
				return this.GetTable<ScreenList>();
			}
		}
		
		public System.Data.Linq.Table<SpecialEdit> SpecialEdits
		{
			get
			{
				return this.GetTable<SpecialEdit>();
			}
		}
		
		public System.Data.Linq.Table<TraceLog> TraceLogs
		{
			get
			{
				return this.GetTable<TraceLog>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankList")]
	public partial class BankList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _BankId;
		
		private string _bankName;
		
		private bool _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankIdChanging(byte value);
    partial void OnBankIdChanged();
    partial void OnbankNameChanging(string value);
    partial void OnbankNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public BankList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bankName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string bankName
		{
			get
			{
				return this._bankName;
			}
			set
			{
				if ((this._bankName != value))
				{
					this.OnbankNameChanging(value);
					this.SendPropertyChanging();
					this._bankName = value;
					this.SendPropertyChanged("bankName");
					this.OnbankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BranchList")]
	public partial class BranchList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Zone_code;
		
		private string _branch_code;
		
		private string _branch_name;
		
		private string _Bank_Address;
		
		private string _country;
		
		private string _Status;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZone_codeChanging(string value);
    partial void OnZone_codeChanged();
    partial void Onbranch_codeChanging(string value);
    partial void Onbranch_codeChanged();
    partial void Onbranch_nameChanging(string value);
    partial void Onbranch_nameChanged();
    partial void OnBank_AddressChanging(string value);
    partial void OnBank_AddressChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public BranchList()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zone_code", DbType="Char(4) NOT NULL", CanBeNull=false)]
		public string Zone_code
		{
			get
			{
				return this._Zone_code;
			}
			set
			{
				if ((this._Zone_code != value))
				{
					this.OnZone_codeChanging(value);
					this.SendPropertyChanging();
					this._Zone_code = value;
					this.SendPropertyChanged("Zone_code");
					this.OnZone_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_branch_code", DbType="Char(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string branch_code
		{
			get
			{
				return this._branch_code;
			}
			set
			{
				if ((this._branch_code != value))
				{
					this.Onbranch_codeChanging(value);
					this.SendPropertyChanging();
					this._branch_code = value;
					this.SendPropertyChanged("branch_code");
					this.Onbranch_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_branch_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string branch_name
		{
			get
			{
				return this._branch_name;
			}
			set
			{
				if ((this._branch_name != value))
				{
					this.Onbranch_nameChanging(value);
					this.SendPropertyChanging();
					this._branch_name = value;
					this.SendPropertyChanged("branch_name");
					this.Onbranch_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bank_Address", DbType="VarChar(90) NOT NULL", CanBeNull=false)]
		public string Bank_Address
		{
			get
			{
				return this._Bank_Address;
			}
			set
			{
				if ((this._Bank_Address != value))
				{
					this.OnBank_AddressChanging(value);
					this.SendPropertyChanging();
					this._Bank_Address = value;
					this.SendPropertyChanged("Bank_Address");
					this.OnBank_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="VarChar(30)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Char(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BranchList_User", Storage="_Users", ThisKey="branch_code", OtherKey="BranchCode")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.BranchList = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.BranchList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientId;
		
		private string _ClientName;
		
		private string _CustomerCode;
		
		private string _CollectionAccount;
		
		private string _TransferAccount;
		
		private bool _isActive;
		
		private EntitySet<Collection> _Collections;
		
		private EntitySet<CollectionTransfer> _CollectionTransfers;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnCustomerCodeChanging(string value);
    partial void OnCustomerCodeChanged();
    partial void OnCollectionAccountChanging(string value);
    partial void OnCollectionAccountChanged();
    partial void OnTransferAccountChanging(string value);
    partial void OnTransferAccountChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public Client()
		{
			this._Collections = new EntitySet<Collection>(new Action<Collection>(this.attach_Collections), new Action<Collection>(this.detach_Collections));
			this._CollectionTransfers = new EntitySet<CollectionTransfer>(new Action<CollectionTransfer>(this.attach_CollectionTransfers), new Action<CollectionTransfer>(this.detach_CollectionTransfers));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CustomerCode
		{
			get
			{
				return this._CustomerCode;
			}
			set
			{
				if ((this._CustomerCode != value))
				{
					this.OnCustomerCodeChanging(value);
					this.SendPropertyChanging();
					this._CustomerCode = value;
					this.SendPropertyChanged("CustomerCode");
					this.OnCustomerCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionAccount", DbType="Char(15) NOT NULL", CanBeNull=false)]
		public string CollectionAccount
		{
			get
			{
				return this._CollectionAccount;
			}
			set
			{
				if ((this._CollectionAccount != value))
				{
					this.OnCollectionAccountChanging(value);
					this.SendPropertyChanging();
					this._CollectionAccount = value;
					this.SendPropertyChanged("CollectionAccount");
					this.OnCollectionAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferAccount", DbType="Char(15) NOT NULL", CanBeNull=false)]
		public string TransferAccount
		{
			get
			{
				return this._TransferAccount;
			}
			set
			{
				if ((this._TransferAccount != value))
				{
					this.OnTransferAccountChanging(value);
					this.SendPropertyChanging();
					this._TransferAccount = value;
					this.SendPropertyChanged("TransferAccount");
					this.OnTransferAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Collection", Storage="_Collections", ThisKey="ClientId", OtherKey="ClientId")]
		public EntitySet<Collection> Collections
		{
			get
			{
				return this._Collections;
			}
			set
			{
				this._Collections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CollectionTransfer", Storage="_CollectionTransfers", ThisKey="ClientId", OtherKey="ClientID")]
		public EntitySet<CollectionTransfer> CollectionTransfers
		{
			get
			{
				return this._CollectionTransfers;
			}
			set
			{
				this._CollectionTransfers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Product", Storage="_Products", ThisKey="ClientId", OtherKey="ClientId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_CollectionTransfers(CollectionTransfer entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_CollectionTransfers(CollectionTransfer entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Collection")]
	public partial class Collection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectionId;
		
		private int _ClientId;
		
		private System.DateTime _CollDate;
		
		private short _ProductId;
		
		private string _BranchCode;
		
		private byte _CollectionTypeId;
		
		private string _CollFrom;
		
		private byte _InstTypeId;
		
		private string _InstNumber;
		
		private System.Nullable<System.DateTime> _InstDate;
		
		private System.Nullable<bool> _InstrCleared;
		
		private System.Nullable<int> _InstClearedBy;
		
		private System.Nullable<System.DateTime> _InstClearingDate;
		
		private System.Nullable<int> _InstRecvdBy;
		
		private decimal _CollAmount;
		
		private System.Nullable<byte> _InstBankCode;
		
		private string _Remarks;
		
		private System.Nullable<byte> _CollStatusId;
		
		private bool _uploaded;
		
		private System.Nullable<System.DateTime> _ApproveDate;
		
		private System.Nullable<int> _ApproveBy;
		
		private EntitySet<CollectionAudit> _CollectionAudits;
		
		private EntitySet<SpecialEdit> _SpecialEdits;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<User> _User2;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectionIdChanging(int value);
    partial void OnCollectionIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnCollDateChanging(System.DateTime value);
    partial void OnCollDateChanged();
    partial void OnProductIdChanging(short value);
    partial void OnProductIdChanged();
    partial void OnBranchCodeChanging(string value);
    partial void OnBranchCodeChanged();
    partial void OnCollectionTypeIdChanging(byte value);
    partial void OnCollectionTypeIdChanged();
    partial void OnCollFromChanging(string value);
    partial void OnCollFromChanged();
    partial void OnInstTypeIdChanging(byte value);
    partial void OnInstTypeIdChanged();
    partial void OnInstNumberChanging(string value);
    partial void OnInstNumberChanged();
    partial void OnInstDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInstDateChanged();
    partial void OnInstrClearedChanging(System.Nullable<bool> value);
    partial void OnInstrClearedChanged();
    partial void OnInstClearedByChanging(System.Nullable<int> value);
    partial void OnInstClearedByChanged();
    partial void OnInstClearingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInstClearingDateChanged();
    partial void OnInstRecvdByChanging(System.Nullable<int> value);
    partial void OnInstRecvdByChanged();
    partial void OnCollAmountChanging(decimal value);
    partial void OnCollAmountChanged();
    partial void OnInstBankCodeChanging(System.Nullable<byte> value);
    partial void OnInstBankCodeChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnCollStatusIdChanging(System.Nullable<byte> value);
    partial void OnCollStatusIdChanged();
    partial void OnuploadedChanging(bool value);
    partial void OnuploadedChanged();
    partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveDateChanged();
    partial void OnApproveByChanging(System.Nullable<int> value);
    partial void OnApproveByChanged();
    #endregion
		
		public Collection()
		{
			this._CollectionAudits = new EntitySet<CollectionAudit>(new Action<CollectionAudit>(this.attach_CollectionAudits), new Action<CollectionAudit>(this.detach_CollectionAudits));
			this._SpecialEdits = new EntitySet<SpecialEdit>(new Action<SpecialEdit>(this.attach_SpecialEdits), new Action<SpecialEdit>(this.detach_SpecialEdits));
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._User2 = default(EntityRef<User>);
			this._Client = default(EntityRef<Client>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CollectionId
		{
			get
			{
				return this._CollectionId;
			}
			set
			{
				if ((this._CollectionId != value))
				{
					this.OnCollectionIdChanging(value);
					this.SendPropertyChanging();
					this._CollectionId = value;
					this.SendPropertyChanged("CollectionId");
					this.OnCollectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollDate", DbType="DateTime NOT NULL")]
		public System.DateTime CollDate
		{
			get
			{
				return this._CollDate;
			}
			set
			{
				if ((this._CollDate != value))
				{
					this.OnCollDateChanging(value);
					this.SendPropertyChanging();
					this._CollDate = value;
					this.SendPropertyChanged("CollDate");
					this.OnCollDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="SmallInt NOT NULL")]
		public short ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchCode", DbType="Char(4) NOT NULL", CanBeNull=false)]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionTypeId", DbType="TinyInt NOT NULL")]
		public byte CollectionTypeId
		{
			get
			{
				return this._CollectionTypeId;
			}
			set
			{
				if ((this._CollectionTypeId != value))
				{
					this.OnCollectionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CollectionTypeId = value;
					this.SendPropertyChanged("CollectionTypeId");
					this.OnCollectionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollFrom", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string CollFrom
		{
			get
			{
				return this._CollFrom;
			}
			set
			{
				if ((this._CollFrom != value))
				{
					this.OnCollFromChanging(value);
					this.SendPropertyChanging();
					this._CollFrom = value;
					this.SendPropertyChanged("CollFrom");
					this.OnCollFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstTypeId", DbType="TinyInt NOT NULL")]
		public byte InstTypeId
		{
			get
			{
				return this._InstTypeId;
			}
			set
			{
				if ((this._InstTypeId != value))
				{
					this.OnInstTypeIdChanging(value);
					this.SendPropertyChanging();
					this._InstTypeId = value;
					this.SendPropertyChanged("InstTypeId");
					this.OnInstTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstNumber", DbType="VarChar(50)")]
		public string InstNumber
		{
			get
			{
				return this._InstNumber;
			}
			set
			{
				if ((this._InstNumber != value))
				{
					this.OnInstNumberChanging(value);
					this.SendPropertyChanging();
					this._InstNumber = value;
					this.SendPropertyChanged("InstNumber");
					this.OnInstNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InstDate
		{
			get
			{
				return this._InstDate;
			}
			set
			{
				if ((this._InstDate != value))
				{
					this.OnInstDateChanging(value);
					this.SendPropertyChanging();
					this._InstDate = value;
					this.SendPropertyChanged("InstDate");
					this.OnInstDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrCleared", DbType="Bit")]
		public System.Nullable<bool> InstrCleared
		{
			get
			{
				return this._InstrCleared;
			}
			set
			{
				if ((this._InstrCleared != value))
				{
					this.OnInstrClearedChanging(value);
					this.SendPropertyChanging();
					this._InstrCleared = value;
					this.SendPropertyChanged("InstrCleared");
					this.OnInstrClearedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstClearedBy", DbType="Int")]
		public System.Nullable<int> InstClearedBy
		{
			get
			{
				return this._InstClearedBy;
			}
			set
			{
				if ((this._InstClearedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstClearedByChanging(value);
					this.SendPropertyChanging();
					this._InstClearedBy = value;
					this.SendPropertyChanged("InstClearedBy");
					this.OnInstClearedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstClearingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InstClearingDate
		{
			get
			{
				return this._InstClearingDate;
			}
			set
			{
				if ((this._InstClearingDate != value))
				{
					this.OnInstClearingDateChanging(value);
					this.SendPropertyChanging();
					this._InstClearingDate = value;
					this.SendPropertyChanged("InstClearingDate");
					this.OnInstClearingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstRecvdBy", DbType="Int")]
		public System.Nullable<int> InstRecvdBy
		{
			get
			{
				return this._InstRecvdBy;
			}
			set
			{
				if ((this._InstRecvdBy != value))
				{
					if (this._User2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstRecvdByChanging(value);
					this.SendPropertyChanging();
					this._InstRecvdBy = value;
					this.SendPropertyChanged("InstRecvdBy");
					this.OnInstRecvdByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollAmount", DbType="Money NOT NULL")]
		public decimal CollAmount
		{
			get
			{
				return this._CollAmount;
			}
			set
			{
				if ((this._CollAmount != value))
				{
					this.OnCollAmountChanging(value);
					this.SendPropertyChanging();
					this._CollAmount = value;
					this.SendPropertyChanged("CollAmount");
					this.OnCollAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstBankCode", DbType="TinyInt")]
		public System.Nullable<byte> InstBankCode
		{
			get
			{
				return this._InstBankCode;
			}
			set
			{
				if ((this._InstBankCode != value))
				{
					this.OnInstBankCodeChanging(value);
					this.SendPropertyChanging();
					this._InstBankCode = value;
					this.SendPropertyChanged("InstBankCode");
					this.OnInstBankCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(256)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollStatusId", DbType="TinyInt")]
		public System.Nullable<byte> CollStatusId
		{
			get
			{
				return this._CollStatusId;
			}
			set
			{
				if ((this._CollStatusId != value))
				{
					this.OnCollStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CollStatusId = value;
					this.SendPropertyChanged("CollStatusId");
					this.OnCollStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uploaded", DbType="Bit NOT NULL")]
		public bool uploaded
		{
			get
			{
				return this._uploaded;
			}
			set
			{
				if ((this._uploaded != value))
				{
					this.OnuploadedChanging(value);
					this.SendPropertyChanging();
					this._uploaded = value;
					this.SendPropertyChanged("uploaded");
					this.OnuploadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveBy", DbType="Int")]
		public System.Nullable<int> ApproveBy
		{
			get
			{
				return this._ApproveBy;
			}
			set
			{
				if ((this._ApproveBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproveByChanging(value);
					this.SendPropertyChanging();
					this._ApproveBy = value;
					this.SendPropertyChanged("ApproveBy");
					this.OnApproveByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_CollectionAudit", Storage="_CollectionAudits", ThisKey="CollectionId", OtherKey="CollectionId")]
		public EntitySet<CollectionAudit> CollectionAudits
		{
			get
			{
				return this._CollectionAudits;
			}
			set
			{
				this._CollectionAudits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_SpecialEdit", Storage="_SpecialEdits", ThisKey="CollectionId", OtherKey="CollectionId")]
		public EntitySet<SpecialEdit> SpecialEdits
		{
			get
			{
				return this._SpecialEdits;
			}
			set
			{
				this._SpecialEdits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Collection", Storage="_User", ThisKey="ApproveBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Collections.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Collections.Add(this);
						this._ApproveBy = value.UserId;
					}
					else
					{
						this._ApproveBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Collection1", Storage="_User1", ThisKey="InstClearedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Collections1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Collections1.Add(this);
						this._InstClearedBy = value.UserId;
					}
					else
					{
						this._InstClearedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Collection2", Storage="_User2", ThisKey="InstRecvdBy", OtherKey="UserId", IsForeignKey=true)]
		public User User2
		{
			get
			{
				return this._User2.Entity;
			}
			set
			{
				User previousValue = this._User2.Entity;
				if (((previousValue != value) 
							|| (this._User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User2.Entity = null;
						previousValue.Collections2.Remove(this);
					}
					this._User2.Entity = value;
					if ((value != null))
					{
						value.Collections2.Add(this);
						this._InstRecvdBy = value.UserId;
					}
					else
					{
						this._InstRecvdBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("User2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Collection", Storage="_Client", ThisKey="ClientId", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Collections.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Collections.Add(this);
						this._ClientId = value.ClientId;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Collection", Storage="_Product", ThisKey="ProductId", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Collections.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Collections.Add(this);
						this._ProductId = value.ProductID;
					}
					else
					{
						this._ProductId = default(short);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectionAudits(CollectionAudit entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_CollectionAudits(CollectionAudit entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
		
		private void attach_SpecialEdits(SpecialEdit entity)
		{
			this.SendPropertyChanging();
			entity.Collection = this;
		}
		
		private void detach_SpecialEdits(SpecialEdit entity)
		{
			this.SendPropertyChanging();
			entity.Collection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectionAudit")]
	public partial class CollectionAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SlNo;
		
		private int _CollectionId;
		
		private int _ClientId;
		
		private System.DateTime _CollDate;
		
		private byte _ProductId;
		
		private string _BranchCode;
		
		private byte _CollectionTypeId;
		
		private string _CollFrom;
		
		private byte _InstTypeId;
		
		private string _InstNumber;
		
		private System.Nullable<System.DateTime> _InstDate;
		
		private System.Nullable<bool> _InstrCleared;
		
		private System.Nullable<int> _InstClearedBy;
		
		private System.Nullable<System.DateTime> _InstClearingDate;
		
		private System.Nullable<int> _InstRecvdBy;
		
		private decimal _CollAmount;
		
		private System.Nullable<byte> _InstBankCode;
		
		private string _Remarks;
		
		private System.Nullable<byte> _CollStatusId;
		
		private System.Nullable<bool> _uploaded;
		
		private System.Nullable<System.DateTime> _ApproveDate;
		
		private System.Nullable<int> _ApproveBy;
		
		private System.DateTime _AuditDate;
		
		private EntityRef<Collection> _Collection;
		
		private EntityRef<CollectionStatus> _CollectionStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSlNoChanging(int value);
    partial void OnSlNoChanged();
    partial void OnCollectionIdChanging(int value);
    partial void OnCollectionIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnCollDateChanging(System.DateTime value);
    partial void OnCollDateChanged();
    partial void OnProductIdChanging(byte value);
    partial void OnProductIdChanged();
    partial void OnBranchCodeChanging(string value);
    partial void OnBranchCodeChanged();
    partial void OnCollectionTypeIdChanging(byte value);
    partial void OnCollectionTypeIdChanged();
    partial void OnCollFromChanging(string value);
    partial void OnCollFromChanged();
    partial void OnInstTypeIdChanging(byte value);
    partial void OnInstTypeIdChanged();
    partial void OnInstNumberChanging(string value);
    partial void OnInstNumberChanged();
    partial void OnInstDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInstDateChanged();
    partial void OnInstrClearedChanging(System.Nullable<bool> value);
    partial void OnInstrClearedChanged();
    partial void OnInstClearedByChanging(System.Nullable<int> value);
    partial void OnInstClearedByChanged();
    partial void OnInstClearingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInstClearingDateChanged();
    partial void OnInstRecvdByChanging(System.Nullable<int> value);
    partial void OnInstRecvdByChanged();
    partial void OnCollAmountChanging(decimal value);
    partial void OnCollAmountChanged();
    partial void OnInstBankCodeChanging(System.Nullable<byte> value);
    partial void OnInstBankCodeChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnCollStatusIdChanging(System.Nullable<byte> value);
    partial void OnCollStatusIdChanged();
    partial void OnuploadedChanging(System.Nullable<bool> value);
    partial void OnuploadedChanged();
    partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveDateChanged();
    partial void OnApproveByChanging(System.Nullable<int> value);
    partial void OnApproveByChanged();
    partial void OnAuditDateChanging(System.DateTime value);
    partial void OnAuditDateChanged();
    #endregion
		
		public CollectionAudit()
		{
			this._Collection = default(EntityRef<Collection>);
			this._CollectionStatus = default(EntityRef<CollectionStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SlNo
		{
			get
			{
				return this._SlNo;
			}
			set
			{
				if ((this._SlNo != value))
				{
					this.OnSlNoChanging(value);
					this.SendPropertyChanging();
					this._SlNo = value;
					this.SendPropertyChanged("SlNo");
					this.OnSlNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionId", DbType="Int NOT NULL")]
		public int CollectionId
		{
			get
			{
				return this._CollectionId;
			}
			set
			{
				if ((this._CollectionId != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIdChanging(value);
					this.SendPropertyChanging();
					this._CollectionId = value;
					this.SendPropertyChanged("CollectionId");
					this.OnCollectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollDate", DbType="DateTime NOT NULL")]
		public System.DateTime CollDate
		{
			get
			{
				return this._CollDate;
			}
			set
			{
				if ((this._CollDate != value))
				{
					this.OnCollDateChanging(value);
					this.SendPropertyChanging();
					this._CollDate = value;
					this.SendPropertyChanged("CollDate");
					this.OnCollDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="TinyInt NOT NULL")]
		public byte ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchCode", DbType="Char(4) NOT NULL", CanBeNull=false)]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionTypeId", DbType="TinyInt NOT NULL")]
		public byte CollectionTypeId
		{
			get
			{
				return this._CollectionTypeId;
			}
			set
			{
				if ((this._CollectionTypeId != value))
				{
					this.OnCollectionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CollectionTypeId = value;
					this.SendPropertyChanged("CollectionTypeId");
					this.OnCollectionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollFrom", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string CollFrom
		{
			get
			{
				return this._CollFrom;
			}
			set
			{
				if ((this._CollFrom != value))
				{
					this.OnCollFromChanging(value);
					this.SendPropertyChanging();
					this._CollFrom = value;
					this.SendPropertyChanged("CollFrom");
					this.OnCollFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstTypeId", DbType="TinyInt NOT NULL")]
		public byte InstTypeId
		{
			get
			{
				return this._InstTypeId;
			}
			set
			{
				if ((this._InstTypeId != value))
				{
					this.OnInstTypeIdChanging(value);
					this.SendPropertyChanging();
					this._InstTypeId = value;
					this.SendPropertyChanged("InstTypeId");
					this.OnInstTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstNumber", DbType="VarChar(50)")]
		public string InstNumber
		{
			get
			{
				return this._InstNumber;
			}
			set
			{
				if ((this._InstNumber != value))
				{
					this.OnInstNumberChanging(value);
					this.SendPropertyChanging();
					this._InstNumber = value;
					this.SendPropertyChanged("InstNumber");
					this.OnInstNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InstDate
		{
			get
			{
				return this._InstDate;
			}
			set
			{
				if ((this._InstDate != value))
				{
					this.OnInstDateChanging(value);
					this.SendPropertyChanging();
					this._InstDate = value;
					this.SendPropertyChanged("InstDate");
					this.OnInstDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrCleared", DbType="Bit")]
		public System.Nullable<bool> InstrCleared
		{
			get
			{
				return this._InstrCleared;
			}
			set
			{
				if ((this._InstrCleared != value))
				{
					this.OnInstrClearedChanging(value);
					this.SendPropertyChanging();
					this._InstrCleared = value;
					this.SendPropertyChanged("InstrCleared");
					this.OnInstrClearedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstClearedBy", DbType="Int")]
		public System.Nullable<int> InstClearedBy
		{
			get
			{
				return this._InstClearedBy;
			}
			set
			{
				if ((this._InstClearedBy != value))
				{
					this.OnInstClearedByChanging(value);
					this.SendPropertyChanging();
					this._InstClearedBy = value;
					this.SendPropertyChanged("InstClearedBy");
					this.OnInstClearedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstClearingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InstClearingDate
		{
			get
			{
				return this._InstClearingDate;
			}
			set
			{
				if ((this._InstClearingDate != value))
				{
					this.OnInstClearingDateChanging(value);
					this.SendPropertyChanging();
					this._InstClearingDate = value;
					this.SendPropertyChanged("InstClearingDate");
					this.OnInstClearingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstRecvdBy", DbType="Int")]
		public System.Nullable<int> InstRecvdBy
		{
			get
			{
				return this._InstRecvdBy;
			}
			set
			{
				if ((this._InstRecvdBy != value))
				{
					this.OnInstRecvdByChanging(value);
					this.SendPropertyChanging();
					this._InstRecvdBy = value;
					this.SendPropertyChanged("InstRecvdBy");
					this.OnInstRecvdByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollAmount", DbType="Money NOT NULL")]
		public decimal CollAmount
		{
			get
			{
				return this._CollAmount;
			}
			set
			{
				if ((this._CollAmount != value))
				{
					this.OnCollAmountChanging(value);
					this.SendPropertyChanging();
					this._CollAmount = value;
					this.SendPropertyChanged("CollAmount");
					this.OnCollAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstBankCode", DbType="TinyInt")]
		public System.Nullable<byte> InstBankCode
		{
			get
			{
				return this._InstBankCode;
			}
			set
			{
				if ((this._InstBankCode != value))
				{
					this.OnInstBankCodeChanging(value);
					this.SendPropertyChanging();
					this._InstBankCode = value;
					this.SendPropertyChanged("InstBankCode");
					this.OnInstBankCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(256)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollStatusId", DbType="TinyInt")]
		public System.Nullable<byte> CollStatusId
		{
			get
			{
				return this._CollStatusId;
			}
			set
			{
				if ((this._CollStatusId != value))
				{
					if (this._CollectionStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CollStatusId = value;
					this.SendPropertyChanged("CollStatusId");
					this.OnCollStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uploaded", DbType="Bit")]
		public System.Nullable<bool> uploaded
		{
			get
			{
				return this._uploaded;
			}
			set
			{
				if ((this._uploaded != value))
				{
					this.OnuploadedChanging(value);
					this.SendPropertyChanging();
					this._uploaded = value;
					this.SendPropertyChanged("uploaded");
					this.OnuploadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveBy", DbType="Int")]
		public System.Nullable<int> ApproveBy
		{
			get
			{
				return this._ApproveBy;
			}
			set
			{
				if ((this._ApproveBy != value))
				{
					this.OnApproveByChanging(value);
					this.SendPropertyChanging();
					this._ApproveBy = value;
					this.SendPropertyChanged("ApproveBy");
					this.OnApproveByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditDate", DbType="DateTime NOT NULL")]
		public System.DateTime AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this.OnAuditDateChanging(value);
					this.SendPropertyChanging();
					this._AuditDate = value;
					this.SendPropertyChanged("AuditDate");
					this.OnAuditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_CollectionAudit", Storage="_Collection", ThisKey="CollectionId", OtherKey="CollectionId", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.CollectionAudits.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.CollectionAudits.Add(this);
						this._CollectionId = value.CollectionId;
					}
					else
					{
						this._CollectionId = default(int);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CollectionStatus_CollectionAudit", Storage="_CollectionStatus", ThisKey="CollStatusId", OtherKey="CollStatusID", IsForeignKey=true)]
		public CollectionStatus CollectionStatus
		{
			get
			{
				return this._CollectionStatus.Entity;
			}
			set
			{
				CollectionStatus previousValue = this._CollectionStatus.Entity;
				if (((previousValue != value) 
							|| (this._CollectionStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CollectionStatus.Entity = null;
						previousValue.CollectionAudits.Remove(this);
					}
					this._CollectionStatus.Entity = value;
					if ((value != null))
					{
						value.CollectionAudits.Add(this);
						this._CollStatusId = value.CollStatusID;
					}
					else
					{
						this._CollStatusId = default(Nullable<byte>);
					}
					this.SendPropertyChanged("CollectionStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectionMapping")]
	public partial class CollectionMapping
	{
		
		private int _ClientId;
		
		private byte _CollectionTypeId;
		
		private bool _isActive;
		
		public CollectionMapping()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this._ClientId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionTypeId", DbType="TinyInt NOT NULL")]
		public byte CollectionTypeId
		{
			get
			{
				return this._CollectionTypeId;
			}
			set
			{
				if ((this._CollectionTypeId != value))
				{
					this._CollectionTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this._isActive = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectionStatus")]
	public partial class CollectionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _CollStatusID;
		
		private string _CollStatus;
		
		private bool _isActive;
		
		private EntitySet<CollectionAudit> _CollectionAudits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollStatusIDChanging(byte value);
    partial void OnCollStatusIDChanged();
    partial void OnCollStatusChanging(string value);
    partial void OnCollStatusChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public CollectionStatus()
		{
			this._CollectionAudits = new EntitySet<CollectionAudit>(new Action<CollectionAudit>(this.attach_CollectionAudits), new Action<CollectionAudit>(this.detach_CollectionAudits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollStatusID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte CollStatusID
		{
			get
			{
				return this._CollStatusID;
			}
			set
			{
				if ((this._CollStatusID != value))
				{
					this.OnCollStatusIDChanging(value);
					this.SendPropertyChanging();
					this._CollStatusID = value;
					this.SendPropertyChanged("CollStatusID");
					this.OnCollStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollStatus", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string CollStatus
		{
			get
			{
				return this._CollStatus;
			}
			set
			{
				if ((this._CollStatus != value))
				{
					this.OnCollStatusChanging(value);
					this.SendPropertyChanging();
					this._CollStatus = value;
					this.SendPropertyChanged("CollStatus");
					this.OnCollStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CollectionStatus_CollectionAudit", Storage="_CollectionAudits", ThisKey="CollStatusID", OtherKey="CollStatusId")]
		public EntitySet<CollectionAudit> CollectionAudits
		{
			get
			{
				return this._CollectionAudits;
			}
			set
			{
				this._CollectionAudits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectionAudits(CollectionAudit entity)
		{
			this.SendPropertyChanging();
			entity.CollectionStatus = this;
		}
		
		private void detach_CollectionAudits(CollectionAudit entity)
		{
			this.SendPropertyChanging();
			entity.CollectionStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectionTransfer")]
	public partial class CollectionTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransferID;
		
		private int _ClientID;
		
		private string _TransFromAccnt;
		
		private string _TransToAccnt;
		
		private decimal _TransAmount;
		
		private System.DateTime _TransDate;
		
		private int _TransferBy;
		
		private System.Nullable<int> _ApprovedBy;
		
		private bool _Approved;
		
		private string _Remarks;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransferIDChanging(int value);
    partial void OnTransferIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnTransFromAccntChanging(string value);
    partial void OnTransFromAccntChanged();
    partial void OnTransToAccntChanging(string value);
    partial void OnTransToAccntChanged();
    partial void OnTransAmountChanging(decimal value);
    partial void OnTransAmountChanged();
    partial void OnTransDateChanging(System.DateTime value);
    partial void OnTransDateChanged();
    partial void OnTransferByChanging(int value);
    partial void OnTransferByChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public CollectionTransfer()
		{
			this._Client = default(EntityRef<Client>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransferID
		{
			get
			{
				return this._TransferID;
			}
			set
			{
				if ((this._TransferID != value))
				{
					this.OnTransferIDChanging(value);
					this.SendPropertyChanging();
					this._TransferID = value;
					this.SendPropertyChanged("TransferID");
					this.OnTransferIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransFromAccnt", DbType="Char(15) NOT NULL", CanBeNull=false)]
		public string TransFromAccnt
		{
			get
			{
				return this._TransFromAccnt;
			}
			set
			{
				if ((this._TransFromAccnt != value))
				{
					this.OnTransFromAccntChanging(value);
					this.SendPropertyChanging();
					this._TransFromAccnt = value;
					this.SendPropertyChanged("TransFromAccnt");
					this.OnTransFromAccntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransToAccnt", DbType="Char(15) NOT NULL", CanBeNull=false)]
		public string TransToAccnt
		{
			get
			{
				return this._TransToAccnt;
			}
			set
			{
				if ((this._TransToAccnt != value))
				{
					this.OnTransToAccntChanging(value);
					this.SendPropertyChanging();
					this._TransToAccnt = value;
					this.SendPropertyChanged("TransToAccnt");
					this.OnTransToAccntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransAmount", DbType="Money NOT NULL")]
		public decimal TransAmount
		{
			get
			{
				return this._TransAmount;
			}
			set
			{
				if ((this._TransAmount != value))
				{
					this.OnTransAmountChanging(value);
					this.SendPropertyChanging();
					this._TransAmount = value;
					this.SendPropertyChanged("TransAmount");
					this.OnTransAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransDate
		{
			get
			{
				return this._TransDate;
			}
			set
			{
				if ((this._TransDate != value))
				{
					this.OnTransDateChanging(value);
					this.SendPropertyChanging();
					this._TransDate = value;
					this.SendPropertyChanged("TransDate");
					this.OnTransDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferBy", DbType="Int NOT NULL")]
		public int TransferBy
		{
			get
			{
				return this._TransferBy;
			}
			set
			{
				if ((this._TransferBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransferByChanging(value);
					this.SendPropertyChanging();
					this._TransferBy = value;
					this.SendPropertyChanged("TransferBy");
					this.OnTransferByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(255)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CollectionTransfer", Storage="_Client", ThisKey="ClientID", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.CollectionTransfers.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.CollectionTransfers.Add(this);
						this._ClientID = value.ClientId;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CollectionTransfer", Storage="_User", ThisKey="TransferBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CollectionTransfers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CollectionTransfers.Add(this);
						this._TransferBy = value.UserId;
					}
					else
					{
						this._TransferBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectionType")]
	public partial class CollectionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _CollectionTypeId;
		
		private string _CollectionType1;
		
		private bool _isActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectionTypeIdChanging(byte value);
    partial void OnCollectionTypeIdChanged();
    partial void OnCollectionType1Changing(string value);
    partial void OnCollectionType1Changed();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public CollectionType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionTypeId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte CollectionTypeId
		{
			get
			{
				return this._CollectionTypeId;
			}
			set
			{
				if ((this._CollectionTypeId != value))
				{
					this.OnCollectionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CollectionTypeId = value;
					this.SendPropertyChanged("CollectionTypeId");
					this.OnCollectionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CollectionType", Storage="_CollectionType1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CollectionType1
		{
			get
			{
				return this._CollectionType1;
			}
			set
			{
				if ((this._CollectionType1 != value))
				{
					this.OnCollectionType1Changing(value);
					this.SendPropertyChanging();
					this._CollectionType1 = value;
					this.SendPropertyChanged("CollectionType1");
					this.OnCollectionType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileUploadLog")]
	public partial class FileUploadLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FileId;
		
		private string _CreationTime;
		
		private bool _IsUploaded;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIdChanging(string value);
    partial void OnFileIdChanged();
    partial void OnCreationTimeChanging(string value);
    partial void OnCreationTimeChanged();
    partial void OnIsUploadedChanging(bool value);
    partial void OnIsUploadedChanged();
    #endregion
		
		public FileUploadLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUploaded", DbType="Bit NOT NULL")]
		public bool IsUploaded
		{
			get
			{
				return this._IsUploaded;
			}
			set
			{
				if ((this._IsUploaded != value))
				{
					this.OnIsUploadedChanging(value);
					this.SendPropertyChanging();
					this._IsUploaded = value;
					this.SendPropertyChanged("IsUploaded");
					this.OnIsUploadedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InstrumentType")]
	public partial class InstrumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _InstTypeId;
		
		private string _InstTypeName;
		
		private string _InstTypeShortName;
		
		private byte _InstrSet;
		
		private bool _Active;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstTypeIdChanging(byte value);
    partial void OnInstTypeIdChanged();
    partial void OnInstTypeNameChanging(string value);
    partial void OnInstTypeNameChanged();
    partial void OnInstTypeShortNameChanging(string value);
    partial void OnInstTypeShortNameChanged();
    partial void OnInstrSetChanging(byte value);
    partial void OnInstrSetChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public InstrumentType()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstTypeId", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte InstTypeId
		{
			get
			{
				return this._InstTypeId;
			}
			set
			{
				if ((this._InstTypeId != value))
				{
					this.OnInstTypeIdChanging(value);
					this.SendPropertyChanging();
					this._InstTypeId = value;
					this.SendPropertyChanged("InstTypeId");
					this.OnInstTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstTypeName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string InstTypeName
		{
			get
			{
				return this._InstTypeName;
			}
			set
			{
				if ((this._InstTypeName != value))
				{
					this.OnInstTypeNameChanging(value);
					this.SendPropertyChanging();
					this._InstTypeName = value;
					this.SendPropertyChanged("InstTypeName");
					this.OnInstTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstTypeShortName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string InstTypeShortName
		{
			get
			{
				return this._InstTypeShortName;
			}
			set
			{
				if ((this._InstTypeShortName != value))
				{
					this.OnInstTypeShortNameChanging(value);
					this.SendPropertyChanging();
					this._InstTypeShortName = value;
					this.SendPropertyChanged("InstTypeShortName");
					this.OnInstTypeShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrSet", DbType="TinyInt NOT NULL")]
		public byte InstrSet
		{
			get
			{
				return this._InstrSet;
			}
			set
			{
				if ((this._InstrSet != value))
				{
					this.OnInstrSetChanging(value);
					this.SendPropertyChanging();
					this._InstrSet = value;
					this.SendPropertyChanged("InstrSet");
					this.OnInstrSetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstrumentType_Product", Storage="_Products", ThisKey="InstrSet", OtherKey="InstrTypeSet")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.InstrumentType = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.InstrumentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ProductID;
		
		private int _ClientId;
		
		private string _ProductName;
		
		private byte _InstrTypeSet;
		
		private decimal _CurrentBalance;
		
		private EntitySet<Collection> _Collections;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<InstrumentType> _InstrumentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(short value);
    partial void OnProductIDChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnInstrTypeSetChanging(byte value);
    partial void OnInstrTypeSetChanged();
    partial void OnCurrentBalanceChanging(decimal value);
    partial void OnCurrentBalanceChanged();
    #endregion
		
		public Product()
		{
			this._Collections = new EntitySet<Collection>(new Action<Collection>(this.attach_Collections), new Action<Collection>(this.detach_Collections));
			this._Client = default(EntityRef<Client>);
			this._InstrumentType = default(EntityRef<InstrumentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrTypeSet", DbType="TinyInt NOT NULL")]
		public byte InstrTypeSet
		{
			get
			{
				return this._InstrTypeSet;
			}
			set
			{
				if ((this._InstrTypeSet != value))
				{
					if (this._InstrumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstrTypeSetChanging(value);
					this.SendPropertyChanging();
					this._InstrTypeSet = value;
					this.SendPropertyChanged("InstrTypeSet");
					this.OnInstrTypeSetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentBalance", DbType="Money NOT NULL")]
		public decimal CurrentBalance
		{
			get
			{
				return this._CurrentBalance;
			}
			set
			{
				if ((this._CurrentBalance != value))
				{
					this.OnCurrentBalanceChanging(value);
					this.SendPropertyChanging();
					this._CurrentBalance = value;
					this.SendPropertyChanged("CurrentBalance");
					this.OnCurrentBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Collection", Storage="_Collections", ThisKey="ProductID", OtherKey="ProductId")]
		public EntitySet<Collection> Collections
		{
			get
			{
				return this._Collections;
			}
			set
			{
				this._Collections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Product", Storage="_Client", ThisKey="ClientId", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ClientId = value.ClientId;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstrumentType_Product", Storage="_InstrumentType", ThisKey="InstrTypeSet", OtherKey="InstrSet", IsForeignKey=true)]
		public InstrumentType InstrumentType
		{
			get
			{
				return this._InstrumentType.Entity;
			}
			set
			{
				InstrumentType previousValue = this._InstrumentType.Entity;
				if (((previousValue != value) 
							|| (this._InstrumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstrumentType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._InstrumentType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._InstrTypeSet = value.InstrSet;
					}
					else
					{
						this._InstrTypeSet = default(byte);
					}
					this.SendPropertyChanged("InstrumentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScreenList")]
	public partial class ScreenList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ScreenId;
		
		private string _ScreenName;
		
		private bool _IsSuperAdmin;
		
		private bool _IsManager;
		
		private bool _IsIssuer;
		
		private bool _IsReviewer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScreenIdChanging(byte value);
    partial void OnScreenIdChanged();
    partial void OnScreenNameChanging(string value);
    partial void OnScreenNameChanged();
    partial void OnIsSuperAdminChanging(bool value);
    partial void OnIsSuperAdminChanged();
    partial void OnIsManagerChanging(bool value);
    partial void OnIsManagerChanged();
    partial void OnIsIssuerChanging(bool value);
    partial void OnIsIssuerChanged();
    partial void OnIsReviewerChanging(bool value);
    partial void OnIsReviewerChanged();
    #endregion
		
		public ScreenList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenId", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte ScreenId
		{
			get
			{
				return this._ScreenId;
			}
			set
			{
				if ((this._ScreenId != value))
				{
					this.OnScreenIdChanging(value);
					this.SendPropertyChanging();
					this._ScreenId = value;
					this.SendPropertyChanged("ScreenId");
					this.OnScreenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenName", DbType="VarChar(50)")]
		public string ScreenName
		{
			get
			{
				return this._ScreenName;
			}
			set
			{
				if ((this._ScreenName != value))
				{
					this.OnScreenNameChanging(value);
					this.SendPropertyChanging();
					this._ScreenName = value;
					this.SendPropertyChanged("ScreenName");
					this.OnScreenNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSuperAdmin", DbType="Bit NOT NULL")]
		public bool IsSuperAdmin
		{
			get
			{
				return this._IsSuperAdmin;
			}
			set
			{
				if ((this._IsSuperAdmin != value))
				{
					this.OnIsSuperAdminChanging(value);
					this.SendPropertyChanging();
					this._IsSuperAdmin = value;
					this.SendPropertyChanged("IsSuperAdmin");
					this.OnIsSuperAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsManager", DbType="Bit NOT NULL")]
		public bool IsManager
		{
			get
			{
				return this._IsManager;
			}
			set
			{
				if ((this._IsManager != value))
				{
					this.OnIsManagerChanging(value);
					this.SendPropertyChanging();
					this._IsManager = value;
					this.SendPropertyChanged("IsManager");
					this.OnIsManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIssuer", DbType="Bit NOT NULL")]
		public bool IsIssuer
		{
			get
			{
				return this._IsIssuer;
			}
			set
			{
				if ((this._IsIssuer != value))
				{
					this.OnIsIssuerChanging(value);
					this.SendPropertyChanging();
					this._IsIssuer = value;
					this.SendPropertyChanged("IsIssuer");
					this.OnIsIssuerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReviewer", DbType="Bit NOT NULL")]
		public bool IsReviewer
		{
			get
			{
				return this._IsReviewer;
			}
			set
			{
				if ((this._IsReviewer != value))
				{
					this.OnIsReviewerChanging(value);
					this.SendPropertyChanging();
					this._IsReviewer = value;
					this.SendPropertyChanged("IsReviewer");
					this.OnIsReviewerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecialEdit")]
	public partial class SpecialEdit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EditId;
		
		private int _CollectionId;
		
		private int _EditedBy;
		
		private System.DateTime _EditedDate;
		
		private string _Description;
		
		private bool _Active;
		
		private System.Nullable<int> _ApproveBy;
		
		private System.Nullable<System.DateTime> _ApproveDate;
		
		private EntityRef<Collection> _Collection;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEditIdChanging(int value);
    partial void OnEditIdChanged();
    partial void OnCollectionIdChanging(int value);
    partial void OnCollectionIdChanged();
    partial void OnEditedByChanging(int value);
    partial void OnEditedByChanged();
    partial void OnEditedDateChanging(System.DateTime value);
    partial void OnEditedDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnApproveByChanging(System.Nullable<int> value);
    partial void OnApproveByChanged();
    partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveDateChanged();
    #endregion
		
		public SpecialEdit()
		{
			this._Collection = default(EntityRef<Collection>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EditId
		{
			get
			{
				return this._EditId;
			}
			set
			{
				if ((this._EditId != value))
				{
					this.OnEditIdChanging(value);
					this.SendPropertyChanging();
					this._EditId = value;
					this.SendPropertyChanged("EditId");
					this.OnEditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectionId", DbType="Int NOT NULL")]
		public int CollectionId
		{
			get
			{
				return this._CollectionId;
			}
			set
			{
				if ((this._CollectionId != value))
				{
					if (this._Collection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollectionIdChanging(value);
					this.SendPropertyChanging();
					this._CollectionId = value;
					this.SendPropertyChanged("CollectionId");
					this.OnCollectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditedBy", DbType="Int NOT NULL")]
		public int EditedBy
		{
			get
			{
				return this._EditedBy;
			}
			set
			{
				if ((this._EditedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEditedByChanging(value);
					this.SendPropertyChanging();
					this._EditedBy = value;
					this.SendPropertyChanged("EditedBy");
					this.OnEditedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditedDate", DbType="DateTime NOT NULL")]
		public System.DateTime EditedDate
		{
			get
			{
				return this._EditedDate;
			}
			set
			{
				if ((this._EditedDate != value))
				{
					this.OnEditedDateChanging(value);
					this.SendPropertyChanging();
					this._EditedDate = value;
					this.SendPropertyChanged("EditedDate");
					this.OnEditedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveBy", DbType="Int")]
		public System.Nullable<int> ApproveBy
		{
			get
			{
				return this._ApproveBy;
			}
			set
			{
				if ((this._ApproveBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproveByChanging(value);
					this.SendPropertyChanging();
					this._ApproveBy = value;
					this.SendPropertyChanged("ApproveBy");
					this.OnApproveByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Collection_SpecialEdit", Storage="_Collection", ThisKey="CollectionId", OtherKey="CollectionId", IsForeignKey=true)]
		public Collection Collection
		{
			get
			{
				return this._Collection.Entity;
			}
			set
			{
				Collection previousValue = this._Collection.Entity;
				if (((previousValue != value) 
							|| (this._Collection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Collection.Entity = null;
						previousValue.SpecialEdits.Remove(this);
					}
					this._Collection.Entity = value;
					if ((value != null))
					{
						value.SpecialEdits.Add(this);
						this._CollectionId = value.CollectionId;
					}
					else
					{
						this._CollectionId = default(int);
					}
					this.SendPropertyChanged("Collection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SpecialEdit", Storage="_User", ThisKey="EditedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SpecialEdits.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SpecialEdits.Add(this);
						this._EditedBy = value.UserId;
					}
					else
					{
						this._EditedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SpecialEdit1", Storage="_User1", ThisKey="ApproveBy", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.SpecialEdits1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.SpecialEdits1.Add(this);
						this._ApproveBy = value.UserId;
					}
					else
					{
						this._ApproveBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TraceLog")]
	public partial class TraceLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private int _UserId;
		
		private System.DateTime _LoginTime;
		
		private System.Nullable<System.DateTime> _LogoutTime;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLoginTimeChanging(System.DateTime value);
    partial void OnLoginTimeChanged();
    partial void OnLogoutTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogoutTimeChanged();
    #endregion
		
		public TraceLog()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginTime", DbType="DateTime NOT NULL")]
		public System.DateTime LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoutTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogoutTime
		{
			get
			{
				return this._LogoutTime;
			}
			set
			{
				if ((this._LogoutTime != value))
				{
					this.OnLogoutTimeChanging(value);
					this.SendPropertyChanging();
					this._LogoutTime = value;
					this.SendPropertyChanged("LogoutTime");
					this.OnLogoutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TraceLog", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TraceLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TraceLogs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _LoginName;
		
		private string _Password;
		
		private string _UserName;
		
		private string _UserDetails;
		
		private System.DateTime _CreationDate;
		
		private string _BranchCode;
		
		private byte _UserTypeId;
		
		private bool _isAdmin;
		
		private bool _isActive;
		
		private System.Nullable<bool> _isLoggedIn;
		
		private EntitySet<Collection> _Collections;
		
		private EntitySet<Collection> _Collections1;
		
		private EntitySet<Collection> _Collections2;
		
		private EntitySet<CollectionTransfer> _CollectionTransfers;
		
		private EntitySet<SpecialEdit> _SpecialEdits;
		
		private EntitySet<SpecialEdit> _SpecialEdits1;
		
		private EntitySet<TraceLog> _TraceLogs;
		
		private EntityRef<BranchList> _BranchList;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLoginNameChanging(string value);
    partial void OnLoginNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserDetailsChanging(string value);
    partial void OnUserDetailsChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnBranchCodeChanging(string value);
    partial void OnBranchCodeChanged();
    partial void OnUserTypeIdChanging(byte value);
    partial void OnUserTypeIdChanged();
    partial void OnisAdminChanging(bool value);
    partial void OnisAdminChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnisLoggedInChanging(System.Nullable<bool> value);
    partial void OnisLoggedInChanged();
    #endregion
		
		public User()
		{
			this._Collections = new EntitySet<Collection>(new Action<Collection>(this.attach_Collections), new Action<Collection>(this.detach_Collections));
			this._Collections1 = new EntitySet<Collection>(new Action<Collection>(this.attach_Collections1), new Action<Collection>(this.detach_Collections1));
			this._Collections2 = new EntitySet<Collection>(new Action<Collection>(this.attach_Collections2), new Action<Collection>(this.detach_Collections2));
			this._CollectionTransfers = new EntitySet<CollectionTransfer>(new Action<CollectionTransfer>(this.attach_CollectionTransfers), new Action<CollectionTransfer>(this.detach_CollectionTransfers));
			this._SpecialEdits = new EntitySet<SpecialEdit>(new Action<SpecialEdit>(this.attach_SpecialEdits), new Action<SpecialEdit>(this.detach_SpecialEdits));
			this._SpecialEdits1 = new EntitySet<SpecialEdit>(new Action<SpecialEdit>(this.attach_SpecialEdits1), new Action<SpecialEdit>(this.detach_SpecialEdits1));
			this._TraceLogs = new EntitySet<TraceLog>(new Action<TraceLog>(this.attach_TraceLogs), new Action<TraceLog>(this.detach_TraceLogs));
			this._BranchList = default(EntityRef<BranchList>);
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginName", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string LoginName
		{
			get
			{
				return this._LoginName;
			}
			set
			{
				if ((this._LoginName != value))
				{
					this.OnLoginNameChanging(value);
					this.SendPropertyChanging();
					this._LoginName = value;
					this.SendPropertyChanged("LoginName");
					this.OnLoginNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDetails", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UserDetails
		{
			get
			{
				return this._UserDetails;
			}
			set
			{
				if ((this._UserDetails != value))
				{
					this.OnUserDetailsChanging(value);
					this.SendPropertyChanging();
					this._UserDetails = value;
					this.SendPropertyChanged("UserDetails");
					this.OnUserDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchCode", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					if (this._BranchList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeId", DbType="TinyInt NOT NULL")]
		public byte UserTypeId
		{
			get
			{
				return this._UserTypeId;
			}
			set
			{
				if ((this._UserTypeId != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._UserTypeId = value;
					this.SendPropertyChanged("UserTypeId");
					this.OnUserTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAdmin", DbType="Bit NOT NULL")]
		public bool isAdmin
		{
			get
			{
				return this._isAdmin;
			}
			set
			{
				if ((this._isAdmin != value))
				{
					this.OnisAdminChanging(value);
					this.SendPropertyChanging();
					this._isAdmin = value;
					this.SendPropertyChanged("isAdmin");
					this.OnisAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLoggedIn", DbType="Bit")]
		public System.Nullable<bool> isLoggedIn
		{
			get
			{
				return this._isLoggedIn;
			}
			set
			{
				if ((this._isLoggedIn != value))
				{
					this.OnisLoggedInChanging(value);
					this.SendPropertyChanging();
					this._isLoggedIn = value;
					this.SendPropertyChanged("isLoggedIn");
					this.OnisLoggedInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Collection", Storage="_Collections", ThisKey="UserId", OtherKey="ApproveBy")]
		public EntitySet<Collection> Collections
		{
			get
			{
				return this._Collections;
			}
			set
			{
				this._Collections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Collection1", Storage="_Collections1", ThisKey="UserId", OtherKey="InstClearedBy")]
		public EntitySet<Collection> Collections1
		{
			get
			{
				return this._Collections1;
			}
			set
			{
				this._Collections1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Collection2", Storage="_Collections2", ThisKey="UserId", OtherKey="InstRecvdBy")]
		public EntitySet<Collection> Collections2
		{
			get
			{
				return this._Collections2;
			}
			set
			{
				this._Collections2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CollectionTransfer", Storage="_CollectionTransfers", ThisKey="UserId", OtherKey="TransferBy")]
		public EntitySet<CollectionTransfer> CollectionTransfers
		{
			get
			{
				return this._CollectionTransfers;
			}
			set
			{
				this._CollectionTransfers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SpecialEdit", Storage="_SpecialEdits", ThisKey="UserId", OtherKey="EditedBy")]
		public EntitySet<SpecialEdit> SpecialEdits
		{
			get
			{
				return this._SpecialEdits;
			}
			set
			{
				this._SpecialEdits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SpecialEdit1", Storage="_SpecialEdits1", ThisKey="UserId", OtherKey="ApproveBy")]
		public EntitySet<SpecialEdit> SpecialEdits1
		{
			get
			{
				return this._SpecialEdits1;
			}
			set
			{
				this._SpecialEdits1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TraceLog", Storage="_TraceLogs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<TraceLog> TraceLogs
		{
			get
			{
				return this._TraceLogs;
			}
			set
			{
				this._TraceLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BranchList_User", Storage="_BranchList", ThisKey="BranchCode", OtherKey="branch_code", IsForeignKey=true)]
		public BranchList BranchList
		{
			get
			{
				return this._BranchList.Entity;
			}
			set
			{
				BranchList previousValue = this._BranchList.Entity;
				if (((previousValue != value) 
							|| (this._BranchList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BranchList.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._BranchList.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._BranchCode = value.branch_code;
					}
					else
					{
						this._BranchCode = default(string);
					}
					this.SendPropertyChanged("BranchList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType", ThisKey="UserTypeId", OtherKey="UserTypeId", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserTypeId = value.UserTypeId;
					}
					else
					{
						this._UserTypeId = default(byte);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Collections(Collection entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Collections1(Collection entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Collections1(Collection entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Collections2(Collection entity)
		{
			this.SendPropertyChanging();
			entity.User2 = this;
		}
		
		private void detach_Collections2(Collection entity)
		{
			this.SendPropertyChanging();
			entity.User2 = null;
		}
		
		private void attach_CollectionTransfers(CollectionTransfer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CollectionTransfers(CollectionTransfer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SpecialEdits(SpecialEdit entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SpecialEdits(SpecialEdit entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SpecialEdits1(SpecialEdit entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_SpecialEdits1(SpecialEdit entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_TraceLogs(TraceLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TraceLogs(TraceLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _UserTypeId;
		
		private string _TypeName;
		
		private string _UserTypeInfo;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeIdChanging(byte value);
    partial void OnUserTypeIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnUserTypeInfoChanging(string value);
    partial void OnUserTypeInfoChanged();
    #endregion
		
		public UserType()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte UserTypeId
		{
			get
			{
				return this._UserTypeId;
			}
			set
			{
				if ((this._UserTypeId != value))
				{
					this.OnUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._UserTypeId = value;
					this.SendPropertyChanged("UserTypeId");
					this.OnUserTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeInfo", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UserTypeInfo
		{
			get
			{
				return this._UserTypeInfo;
			}
			set
			{
				if ((this._UserTypeInfo != value))
				{
					this.OnUserTypeInfoChanging(value);
					this.SendPropertyChanging();
					this._UserTypeInfo = value;
					this.SendPropertyChanged("UserTypeInfo");
					this.OnUserTypeInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_Users", ThisKey="UserTypeId", OtherKey="UserTypeId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
}
#pragma warning restore 1591
